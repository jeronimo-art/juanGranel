"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var value_1 = require("../actions/value");
var hooks_1 = require("../components/hooks");
var EditorStore_1 = __importStar(require("../EditorStore"));
var migrate_1 = require("../migrations/migrate");
var serialzeValue_1 = require("../migrations/serialzeValue");
var reducer_1 = require("../reducer");
var reduxConnect_1 = require("../reduxConnect");
var deepEquals_1 = __importDefault(require("../utils/deepEquals"));
var EditorStoreProvider = function (_a) {
    var children = _a.children, lang = _a.lang, value = _a.value;
    var cellPlugins = (0, hooks_1.useRenderOption)('cellPlugins');
    var middleware = (0, hooks_1.useOption)('middleware');
    var onChangeLang = (0, hooks_1.useCallbackOption)('onChangeLang');
    var onChange = (0, hooks_1.useCallbackOption)('onChange');
    var storeFromOptions = (0, hooks_1.useOption)('store');
    var editorStore = (0, react_1.useMemo)(function () {
        var store = new EditorStore_1.default({
            initialState: (0, reducer_1.initialState)((0, migrate_1.migrateValue)(value, {
                cellPlugins: cellPlugins,
                lang: lang,
            }), lang),
            store: storeFromOptions,
            middleware: middleware,
        });
        return store;
    }, __spreadArray([storeFromOptions], __read(middleware), false));
    var lastValueRef = (0, react_1.useRef)(value);
    (0, react_1.useEffect)(function () {
        var oldLang = lang;
        var handleChanges = function () {
            // notify outsiders to new language, when chagned in ui
            var newLang = editorStore.store.getState().reactPage.settings.lang;
            if (newLang !== oldLang || newLang !== lang) {
                oldLang = newLang;
                onChangeLang === null || onChangeLang === void 0 ? void 0 : onChangeLang(newLang);
            }
            if (!onChange) {
                return;
            }
            //console.time('calculate notifiy on change');
            var currentValue = editorStore.store.getState().reactPage.values.present;
            if (!currentValue) {
                // console.timeEnd('calculate notifiy on change');
                return;
            }
            var serializedValue = (0, serialzeValue_1.serialzeValue)(currentValue, cellPlugins);
            var serializedEqual = (0, deepEquals_1.default)(lastValueRef.current, serializedValue);
            if (serializedEqual) {
                //    console.timeEnd('calculate notifiy on change');
                return;
            }
            lastValueRef.current = serializedValue;
            //   console.timeEnd('calculate notifiy on change');
            onChange(serializedValue);
        };
        var unsubscribe = editorStore.store.subscribe(handleChanges);
        return function () {
            unsubscribe();
        };
    }, [editorStore, onChange, cellPlugins]);
    (0, react_1.useEffect)(function () {
        var equal = (0, deepEquals_1.default)(value, lastValueRef.current);
        // value changed from outside
        if (!equal) {
            lastValueRef.current = value;
            var migratedValue = (0, migrate_1.migrateValue)(value, {
                cellPlugins: cellPlugins,
                lang: lang,
            });
            editorStore.store.dispatch((0, value_1.updateValue)(migratedValue));
        }
    }, [value, cellPlugins, lang]);
    (0, react_1.useEffect)(function () {
        // if changed from outside
        editorStore.setLang(lang);
    }, [editorStore, lang]);
    return (react_1.default.createElement(reduxConnect_1.ReduxProvider, { store: editorStore.store },
        react_1.default.createElement(EditorStore_1.EditorContext.Provider, { value: editorStore }, children)));
};
exports.default = EditorStoreProvider;
//# sourceMappingURL=EditorStoreProvider.js.map