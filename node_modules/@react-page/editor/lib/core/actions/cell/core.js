"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.coreActions = exports.blurAllCells = exports.blurCell = exports.focusCell = exports.resizeCell = exports.removeCells = exports.updateCellData = exports.updateCellIsDraft = exports.CELL_BLUR_ALL = exports.CELL_BLUR = exports.CELL_FOCUS = exports.CELL_RESIZE = exports.CELL_REMOVE = exports.CELL_UPDATE_DATA = exports.CELL_UPDATE_IS_DRAFT = void 0;
exports.CELL_UPDATE_IS_DRAFT = 'CELL_UPDATE_IS_DRAFT';
exports.CELL_UPDATE_DATA = 'CELL_UPDATE_DATA';
exports.CELL_REMOVE = 'CELL_REMOVE';
exports.CELL_RESIZE = 'CELL_RESIZE';
exports.CELL_FOCUS = 'CELL_FOCUS';
exports.CELL_BLUR = 'CELL_BLUR';
exports.CELL_BLUR_ALL = 'CELL_BLUR_ALL';
var updateCellIsDraft = function (id, isDraft, lang) {
    if (isDraft === void 0) { isDraft = false; }
    if (lang === void 0) { lang = null; }
    return ({
        type: exports.CELL_UPDATE_IS_DRAFT,
        ts: new Date(),
        id: id,
        isDraft: isDraft,
        lang: lang,
    });
};
exports.updateCellIsDraft = updateCellIsDraft;
var updateCellData = function (id) {
    return function (data, options) { return (__assign({ type: exports.CELL_UPDATE_DATA, ts: new Date(), id: id, data: data }, options)); };
};
exports.updateCellData = updateCellData;
var removeCells = function (ids) { return ({
    type: exports.CELL_REMOVE,
    ts: new Date(),
    ids: ids,
}); };
exports.removeCells = removeCells;
var resizeCell = function (id) {
    return function (size) {
        if (size === void 0) { size = 1; }
        return ({
            type: exports.CELL_RESIZE,
            ts: new Date(),
            id: id,
            size: size,
        });
    };
};
exports.resizeCell = resizeCell;
/**
 * Dispatch to focus a cell.
 */
var focusCell = function (id, scrollToCell, mode) {
    if (scrollToCell === void 0) { scrollToCell = false; }
    if (mode === void 0) { mode = 'replace'; }
    return ({
        type: exports.CELL_FOCUS,
        ts: new Date(),
        id: id,
        scrollToCell: scrollToCell,
        mode: mode,
    });
};
exports.focusCell = focusCell;
/**
 * Dispatch to blur a cell.
 */
var blurCell = function (id) { return ({
    type: exports.CELL_BLUR,
    ts: new Date(),
    id: id,
}); };
exports.blurCell = blurCell;
/**
 * Dispatch to blur all cells. For example when clicking on document body.
 */
var blurAllCells = function () { return ({
    type: exports.CELL_BLUR_ALL,
    ts: new Date(),
}); };
exports.blurAllCells = blurAllCells;
exports.coreActions = {
    blurAllCells: exports.blurAllCells,
    blurCell: exports.blurCell,
    focusCell: exports.focusCell,
    resizeCell: exports.resizeCell,
    removeCells: exports.removeCells,
    updateCellData: exports.updateCellData,
    updateCellIsDraft: exports.updateCellIsDraft,
};
//# sourceMappingURL=core.js.map