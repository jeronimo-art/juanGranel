"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var display_1 = require("../actions/display");
var hooks_1 = require("./hooks");
// this might break in future, but its better than nothing
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function findReactElement(node) {
    for (var key in node) {
        if (key.startsWith('__reactInternalInstance$') ||
            key.startsWith('__reactFiber$') // react 17
        ) {
            return node[key];
        }
    }
    return null;
}
// we go up the reac-tree. This works even through portals, which would not be possible with traversing the dom tree!
var isInSameTree = function (parent, child) {
    if (!parent) {
        return false;
    }
    var element = findReactElement(child);
    while (element) {
        if (element.stateNode === parent) {
            return true;
        }
        element = element.return;
    }
    return false;
};
var useBlurAll = function (_a) {
    var _b = _a.defaultMode, defaultMode = _b === void 0 ? display_1.DISPLAY_MODE_EDIT : _b, disabled = _a.disabled;
    var ref = react_1.default.useRef();
    var blurAllCells = (0, hooks_1.useBlurAllCells)();
    var setMode = (0, hooks_1.useSetMode)();
    var isInsertMode = (0, hooks_1.useIsInsertMode)();
    (0, react_1.useEffect)(function () {
        if (disabled) {
            return;
        }
        if (!ref.current) {
            return;
        }
        if (!document && !document.body) {
            return;
        }
        var onMouseDown = function (e) {
            if (!isInSameTree(ref.current, e.target)) {
                blurAllCells();
                // set us in default mode if current mode is "insert"
                if (isInsertMode) {
                    setMode(defaultMode);
                }
            }
        };
        document.body.addEventListener('mousedown', onMouseDown);
        return function () {
            document.body.removeEventListener('mousedown', onMouseDown);
        };
    }, [ref.current, disabled, isInsertMode, setMode, blurAllCells]);
    return ref;
};
var BlurGate = function (_a) {
    var children = _a.children;
    var defaultMode = (0, hooks_1.useOption)('blurGateDefaultMode');
    var disabled = (0, hooks_1.useOption)('blurGateDisabled');
    var ref = useBlurAll({ defaultMode: defaultMode, disabled: disabled });
    return react_1.default.createElement("div", { ref: ref }, children);
};
exports.default = BlurGate;
//# sourceMappingURL=BlurGate.js.map