"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCellDrop = void 0;
var classnames_1 = __importDefault(require("classnames"));
var react_1 = __importStar(require("react"));
var react_dnd_1 = require("react-dnd");
var reduxConnect_1 = require("../../../reduxConnect");
var hooks_1 = require("../../hooks");
var dnd_1 = require("./helper/dnd");
var useCellDrop = function (nodeId) {
    var _a;
    var ref = react_1.default.useRef(null);
    var hoverTarget = (0, hooks_1.useNodeAsHoverTarget)(nodeId);
    var targetParentNodeId = (_a = hoverTarget === null || hoverTarget === void 0 ? void 0 : hoverTarget.ancestorIds) === null || _a === void 0 ? void 0 : _a[0];
    var checkIfAllowed = (0, hooks_1.useCellIsAllowedHere)(targetParentNodeId);
    var plugin = (0, hooks_1.usePluginOfCell)(nodeId);
    var cellPlugins = (0, hooks_1.useAllCellPluginsForNode)(targetParentNodeId);
    var hoverActions = (0, hooks_1.useHoverActions)();
    var dropActions = (0, hooks_1.useDropActions)(targetParentNodeId);
    var isHoveringOverThis = (0, reduxConnect_1.useSelector)(function (state) { var _a; return ((_a = state.reactPage.hover) === null || _a === void 0 ? void 0 : _a.nodeId) === nodeId; });
    var _b = __read((0, react_dnd_1.useDrop)({
        accept: 'cell',
        canDrop: function (item) {
            // check if plugin is allowed here
            if (!checkIfAllowed(item)) {
                return false;
            }
            if (plugin === null || plugin === void 0 ? void 0 : plugin.allowNeighbour) {
                if (!plugin.allowNeighbour(item.cell)) {
                    return false;
                }
            }
            return (item.cell.id !== nodeId &&
                !(hoverTarget === null || hoverTarget === void 0 ? void 0 : hoverTarget.ancestorIds.includes(item.cell.id)));
        },
        collect: function (monitor) { return ({
            isOver: monitor.isOver(),
            isAllowed: checkIfAllowed(monitor.getItem()),
        }); },
        hover: function (item, monitor) {
            if (plugin === null || plugin === void 0 ? void 0 : plugin.allowNeighbour) {
                if (!plugin.allowNeighbour(item.cell)) {
                    return false;
                }
            }
            (0, dnd_1.onHover)(hoverTarget, monitor, ref.current, hoverActions, cellPlugins);
        },
        drop: function (item, monitor) {
            (0, dnd_1.onDrop)(hoverTarget, monitor, ref.current, dropActions, cellPlugins);
        },
    }), 2), _c = _b[0], isOver = _c.isOver, isAllowed = _c.isAllowed, dropRef = _b[1];
    (0, react_1.useEffect)(function () {
        if (!isOver && isHoveringOverThis) {
            hoverActions.clear();
        }
    }, [isOver, isHoveringOverThis, hoverActions.clear]);
    // see https://github.com/react-dnd/react-dnd/issues/1955
    var attach = (0, react_1.useCallback)(function (domElement) {
        dropRef(domElement);
        ref.current = domElement;
        // use dom element here for measuring
    }, [dropRef]);
    return [attach, isAllowed];
};
exports.useCellDrop = useCellDrop;
var Droppable = function (props) {
    var _a;
    var isLayoutMode = (0, hooks_1.useIsLayoutMode)();
    var isInsertMode = (0, hooks_1.useIsInsertMode)();
    var _b = __read((0, exports.useCellDrop)(props.nodeId), 2), attach = _b[0], isAllowed = _b[1];
    var hoverPosition = (0, hooks_1.useNodeHoverPosition)(props.nodeId);
    var allowMoveInEditMode = (0, hooks_1.useOption)('allowMoveInEditMode');
    var hasPlugin = (0, hooks_1.useCellHasPlugin)(props.nodeId);
    var cellSpacingY = (0, hooks_1.useCellSpacing)().y;
    var needVerticalMargin = !props.isLeaf && !hasPlugin;
    if (!(isLayoutMode || isInsertMode) && !allowMoveInEditMode) {
        return (react_1.default.createElement("div", { className: 'react-page-cell-droppable-container' }, props.children));
    }
    return (react_1.default.createElement("div", { ref: attach, style: {
            height: '100%',
        }, className: "react-page-cell-droppable" },
        react_1.default.createElement("div", { style: {
                position: 'absolute',
                pointerEvents: 'none',
                top: needVerticalMargin ? "".concat(cellSpacingY / 2, "px") : 0,
                left: 0,
                bottom: needVerticalMargin ? "".concat(cellSpacingY / 2, "px") : 0,
                right: 0,
            }, className: (0, classnames_1.default)((_a = {
                    'react-page-cell-droppable-not-allowed': !isAllowed,
                    'react-page-cell-droppable-is-over-current': isAllowed && hoverPosition
                },
                _a["react-page-cell-droppable-is-over-".concat(hoverPosition)] = isAllowed && hoverPosition,
                _a['react-page-cell-droppable-leaf'] = props.isLeaf,
                _a)) }),
        props.children));
};
exports.default = Droppable;
//# sourceMappingURL=index.js.map