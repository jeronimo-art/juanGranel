"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var classnames_1 = __importDefault(require("classnames"));
var react_1 = __importDefault(require("react"));
var hooks_1 = require("../../hooks");
var useDragHandle_1 = require("../Draggable/useDragHandle");
var Handle = function (_a) {
    var nodeId = _a.nodeId;
    var allowMoveInEditMode = (0, hooks_1.useOption)('allowMoveInEditMode');
    var isLayoutMode = (0, hooks_1.useIsLayoutMode)();
    var dragEnabled = allowMoveInEditMode || isLayoutMode;
    var _b = __read((0, useDragHandle_1.useDragHandle)(nodeId, dragEnabled), 3), isDragging = _b[0], dragRef = _b[1], previewElement = _b[2];
    var focus = (0, hooks_1.useFocusCell)(nodeId);
    var plugin = (0, hooks_1.usePluginOfCell)(nodeId);
    var t = (0, hooks_1.useUiTranslator)().t;
    if (!plugin) {
        return null;
    }
    return (react_1.default.createElement(react_1.default.Fragment, null,
        previewElement,
        react_1.default.createElement("div", { className: (0, classnames_1.default)('react-page-cell-handle', {
                'react-page-cell-handle-drag-enabled': dragEnabled,
                'react-page-cell-handle-is-dragging': isDragging,
            }), ref: dragRef, onClick: function (e) {
                var mode = e.metaKey || e.ctrlKey ? 'add' : 'replace';
                focus(false, mode);
            } }, t((plugin === null || plugin === void 0 ? void 0 : plugin.title) || (plugin === null || plugin === void 0 ? void 0 : plugin.text)))));
};
exports.default = react_1.default.memo(Handle);
//# sourceMappingURL=index.js.map