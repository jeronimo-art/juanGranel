"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var getCellSpacing_1 = require("../../../utils/getCellSpacing");
var hooks_1 = require("../../hooks");
var Row_1 = __importDefault(require("../../Row"));
var Draggable_1 = __importDefault(require("../Draggable"));
var Droppable_1 = __importDefault(require("../Droppable"));
var InsertNew_1 = __importDefault(require("../InsertNew"));
var PluginComponent_1 = __importDefault(require("../PluginComponent"));
var Inner = function (_a) {
    var _b, _c, _d;
    var nodeId = _a.nodeId;
    var isPreviewMode = (0, hooks_1.useIsPreviewMode)();
    var isEditMode = (0, hooks_1.useIsEditMode)();
    var cellShouldHavePlugin = (0, hooks_1.useCellHasPlugin)(nodeId);
    var plugin = (0, hooks_1.usePluginOfCell)(nodeId);
    var setEditMode = (0, hooks_1.useSetEditMode)();
    var focus = (0, hooks_1.useFocusCell)(nodeId);
    var focused = (0, hooks_1.useIsFocused)(nodeId);
    var childrenIds = (0, hooks_1.useNodeChildrenIds)(nodeId);
    var cellSpacingY = (0, hooks_1.useCellSpacing)().y;
    var ref = react_1.default.useRef();
    var hasChildren = childrenIds.length > 0;
    var data = (0, hooks_1.useCellData)(nodeId);
    var pluginCellSpacing = (0, getCellSpacing_1.getPluginCellSpacing)(plugin, data);
    var _e = __read((0, hooks_1.useCellSpacingProvider)(pluginCellSpacing), 2), Provider = _e[0], providerValue = _e[1];
    if (typeof pluginCellSpacing !== 'undefined' && pluginCellSpacing != null) {
        cellSpacingY = (0, getCellSpacing_1.normalizeCellSpacing)(pluginCellSpacing).y;
    }
    var onClick = react_1.default.useCallback(function (e) {
        var _a;
        var target = e.target;
        // check whether the click was inside cell-inner, but not inside a nested cell
        if (!focused &&
            isEditMode &&
            // this arrives when they stop resizing
            !((_a = target.classList) === null || _a === void 0 ? void 0 : _a.contains('react-page-row')) &&
            (target === null || target === void 0 ? void 0 : target.closest) &&
            target.closest('.react-page-cell-inner') === ref.current &&
            target.closest('.react-page-cell.react-page-cell-has-plugin') ===
                ref.current.closest('.react-page-cell')) {
            var mode = e.metaKey || e.ctrlKey ? 'add' : 'replace';
            focus(false, mode);
            setEditMode();
        }
    }, [focus, focused, isEditMode, setEditMode]);
    var insertAllowed = ((_b = plugin === null || plugin === void 0 ? void 0 : plugin.childConstraints) === null || _b === void 0 ? void 0 : _b.maxChildren)
        ? ((_c = plugin === null || plugin === void 0 ? void 0 : plugin.childConstraints) === null || _c === void 0 ? void 0 : _c.maxChildren) > childrenIds.length
        : true;
    var innerDivProps = (0, hooks_1.useCellInnerDivStylingProps)(nodeId);
    var children = childrenIds.map(function (id) { return react_1.default.createElement(Row_1.default, { nodeId: id, key: id }); });
    var components = (0, hooks_1.useOption)('components');
    var InsertNewWithDefault = (_d = components === null || components === void 0 ? void 0 : components.InsertNew) !== null && _d !== void 0 ? _d : InsertNew_1.default;
    if (!cellShouldHavePlugin) {
        return react_1.default.createElement(Droppable_1.default, { nodeId: nodeId }, children);
    }
    return (react_1.default.createElement(Droppable_1.default, { nodeId: nodeId, isLeaf: !hasChildren },
        react_1.default.createElement(Draggable_1.default, { nodeId: nodeId, isLeaf: !hasChildren },
            react_1.default.createElement("div", __assign({ onClick: !isPreviewMode ? onClick : undefined, tabIndex: -1, ref: ref }, innerDivProps),
                react_1.default.createElement(PluginComponent_1.default, { nodeId: nodeId, hasChildren: hasChildren },
                    hasChildren ? (react_1.default.createElement(Provider, { value: providerValue },
                        react_1.default.createElement("div", { style: cellSpacingY !== 0
                                ? { margin: "".concat(-cellSpacingY / 2, "px 0") }
                                : undefined }, children))) : (children),
                    insertAllowed ? (react_1.default.createElement(InsertNewWithDefault, { parentCellId: nodeId, childrenIds: childrenIds })) : null)))));
};
exports.default = react_1.default.memo(Inner);
//# sourceMappingURL=index.js.map