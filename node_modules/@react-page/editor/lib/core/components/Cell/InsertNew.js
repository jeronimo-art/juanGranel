"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var react_dnd_1 = require("react-dnd");
var hooks_1 = require("../hooks");
var InsertNew = function (_a) {
    var parentCellId = _a.parentCellId;
    var setInsertMode = (0, hooks_1.useSetInsertMode)();
    var insertNew = (0, hooks_1.useInsertNew)(parentCellId);
    var isPreviewMode = (0, hooks_1.useIsPreviewMode)();
    var isLayoutMode = (0, hooks_1.useIsLayoutMode)();
    var setReferenceNodeId = (0, hooks_1.useSetDisplayReferenceNodeId)();
    var checkIfAllowed = (0, hooks_1.useCellIsAllowedHere)(parentCellId);
    var _b = __read((0, react_dnd_1.useDrop)({
        accept: 'cell',
        canDrop: function (item) {
            return checkIfAllowed(item);
        },
        collect: function (monitor) { return ({
            isOver: monitor.isOver(),
            isAllowed: checkIfAllowed(monitor.getItem()),
        }); },
        drop: function (item, monitor) {
            // fallback drop
            if (!monitor.didDrop()) {
                insertNew(item.cell);
            }
        },
    }), 2), _c = _b[0], isOver = _c.isOver, isAllowed = _c.isAllowed, dropRef = _b[1];
    if (isPreviewMode)
        return null;
    return (react_1.default.createElement("div", { ref: dropRef, className: 'react-page-cell-insert-new' + (isOver && isAllowed ? ' hover' : ''), style: {
            pointerEvents: 'all',
            zIndex: isLayoutMode ? 10 : 1,
            overflow: 'hidden',
            width: '50%',
            minWidth: 120,
            margin: 'auto',
            cursor: isOver && !isAllowed ? 'not-allowed' : 'pointer',
        }, onClick: function (e) {
            e.stopPropagation();
            setReferenceNodeId(parentCellId);
            setInsertMode();
        } }));
};
exports.default = react_1.default.memo(InsertNew);
//# sourceMappingURL=InsertNew.js.map