"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useKeepScrollPosition = void 0;
var lodash_throttle_1 = __importDefault(require("lodash.throttle"));
var react_1 = __importStar(require("react"));
var scrollIntoViewWithOffset_1 = __importDefault(require("../../Cell/utils/scrollIntoViewWithOffset"));
var hooks_1 = require("../../hooks");
function isElementInViewport(el) {
    var rect = el.getBoundingClientRect();
    return (rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <=
            (window.innerHeight ||
                document.documentElement.clientHeight) /*or $(window).height() */ &&
        rect.right <=
            (window.innerWidth ||
                document.documentElement.clientWidth) /*or $(window).width() */);
}
var useKeepScrollPosition = function (ref) {
    var mode = (0, hooks_1.useDisplayMode)();
    var firstElementInViewPortref = react_1.default.useRef();
    (0, react_1.useEffect)(function () {
        var onScroll = (0, lodash_throttle_1.default)(function () {
            if (ref.current) {
                var firstInViewport = Array.prototype.find.call(ref.current.getElementsByClassName('react-page-cell'), function (cell) { return isElementInViewport(cell); });
                if (firstInViewport) {
                    firstElementInViewPortref.current = {
                        el: firstInViewport,
                        topOffset: firstInViewport.getBoundingClientRect().top,
                    };
                }
                else {
                    firstElementInViewPortref.current = null;
                }
            }
        }, 600);
        window.addEventListener('scroll', onScroll);
        return function () {
            window.removeEventListener('scroll', onScroll);
        };
    }, []);
    (0, react_1.useEffect)(function () {
        if (firstElementInViewPortref.current) {
            var _a = firstElementInViewPortref.current, el_1 = _a.el, topOffset_1 = _a.topOffset;
            setTimeout(function () {
                (0, scrollIntoViewWithOffset_1.default)(el_1, topOffset_1, 'auto');
            }, 0);
        }
    }, [mode]);
};
exports.useKeepScrollPosition = useKeepScrollPosition;
//# sourceMappingURL=useKeepScrollPosition.js.map