"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCanZoomIn = exports.useCanZoomOut = exports.useZoomIn = exports.useZoomOut = exports.useZoom = exports.useSetZoom = void 0;
var react_1 = require("react");
var reduxConnect_1 = require("../../reduxConnect");
var display_1 = require("../../actions/display");
var options_1 = require("./options");
var useSetZoom = function () {
    var dispatch = (0, reduxConnect_1.useDispatch)();
    return (0, react_1.useCallback)(function (zoom) { return dispatch((0, display_1.setZoom)(zoom)); }, [dispatch]);
};
exports.useSetZoom = useSetZoom;
/**
 * @returns the current zoom
 */
var useZoom = function () {
    return (0, reduxConnect_1.useSelector)(function (state) { return state.reactPage.display.zoom; });
};
exports.useZoom = useZoom;
var useZoomOut = function () {
    var zoom = (0, exports.useZoom)();
    var zoomFactors = (0, options_1.useOption)('zoomFactors');
    var setZoom = (0, exports.useSetZoom)();
    return (0, react_1.useCallback)(function () {
        var newZoom = zoomFactors.find(function (z) { return z < zoom; });
        if (newZoom)
            setZoom(newZoom);
    }, [zoom, setZoom, zoomFactors]);
};
exports.useZoomOut = useZoomOut;
var useZoomIn = function () {
    var zoom = (0, exports.useZoom)();
    var setZoom = (0, exports.useSetZoom)();
    var zoomFactors = (0, options_1.useOption)('zoomFactors');
    return (0, react_1.useCallback)(function () {
        var newZoom = __spreadArray([], __read(zoomFactors), false).reverse().find(function (z) { return z > zoom; });
        if (newZoom)
            setZoom(newZoom);
    }, [zoom, setZoom, zoomFactors]);
};
exports.useZoomIn = useZoomIn;
var useCanZoomOut = function () {
    var zoom = (0, exports.useZoom)();
    var zoomFactors = (0, options_1.useOption)('zoomFactors');
    return zoomFactors.some(function (z) { return z < zoom; });
};
exports.useCanZoomOut = useCanZoomOut;
var useCanZoomIn = function () {
    var zoom = (0, exports.useZoom)();
    var zoomFactors = (0, options_1.useOption)('zoomFactors');
    return zoomFactors.some(function (z) { return z > zoom; });
};
exports.useCanZoomIn = useCanZoomIn;
//# sourceMappingURL=display.js.map