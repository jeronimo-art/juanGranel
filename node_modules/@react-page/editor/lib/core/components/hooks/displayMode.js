"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSetPreviewMode = exports.useSetInsertMode = exports.useSetLayoutMode = exports.useSetEditMode = exports.useSetResizeMode = exports.useSetMode = exports.useDisplayModeReferenceNodeId = exports.useDisplayMode = exports.useIsResizeMode = exports.useIsPreviewMode = exports.useIsLayoutMode = exports.useIsInsertMode = exports.useIsEditMode = void 0;
var react_1 = require("react");
var display_1 = require("../../actions/display");
var reduxConnect_1 = require("../../reduxConnect");
var display_2 = require("../../selector/display");
/**
 * @returns true whether the editor is in edit mode
 */
var useIsEditMode = function () {
    return (0, reduxConnect_1.useSelector)(display_2.isEditMode);
};
exports.useIsEditMode = useIsEditMode;
/**
 * @returns true whether the editor is in insert mode
 */
var useIsInsertMode = function () {
    return (0, reduxConnect_1.useSelector)(display_2.isInsertMode);
};
exports.useIsInsertMode = useIsInsertMode;
/**
 * @returns true whether the editor is in layout mode
 */
var useIsLayoutMode = function () {
    return (0, reduxConnect_1.useSelector)(display_2.isLayoutMode);
};
exports.useIsLayoutMode = useIsLayoutMode;
/**
 * @returns true whether the editor is in preview mode mode
 */
var useIsPreviewMode = function () {
    return (0, reduxConnect_1.useSelector)(display_2.isPreviewMode);
};
exports.useIsPreviewMode = useIsPreviewMode;
/**
 * @returns true whether the editor is in resize mode mode
 */
var useIsResizeMode = function () {
    return (0, reduxConnect_1.useSelector)(display_2.isResizeMode);
};
exports.useIsResizeMode = useIsResizeMode;
/**
 * @returns the current display mode
 */
var useDisplayMode = function () {
    return (0, reduxConnect_1.useSelector)(function (state) { return state.reactPage.display.mode; });
};
exports.useDisplayMode = useDisplayMode;
/**
 * experimental, used internaly for the add new button.
 * @returns a referenced nodeId for the current display mode.
 *
 *
 */
var useDisplayModeReferenceNodeId = function () {
    return (0, reduxConnect_1.useSelector)(function (state) { var _a, _b; return (_b = (_a = state.reactPage) === null || _a === void 0 ? void 0 : _a.display) === null || _b === void 0 ? void 0 : _b.referenceNodeId; });
};
exports.useDisplayModeReferenceNodeId = useDisplayModeReferenceNodeId;
/**
 * @returns function to set the display mode
 */
var useSetMode = function () {
    var dispatch = (0, reduxConnect_1.useDispatch)();
    return (0, react_1.useCallback)(function (mode, referenceNodeId) {
        dispatch((0, display_1.setMode)(mode, referenceNodeId));
    }, [dispatch]);
};
exports.useSetMode = useSetMode;
/**
 * @returns function to change to resize mode
 */
var useSetResizeMode = function () {
    var setMode = (0, exports.useSetMode)();
    return (0, react_1.useCallback)(function () { return setMode(display_1.DISPLAY_MODE_RESIZING); }, [setMode]);
};
exports.useSetResizeMode = useSetResizeMode;
/**
 * @returns function to change to edit mode mode
 */
var useSetEditMode = function () {
    var setMode = (0, exports.useSetMode)();
    return (0, react_1.useCallback)(function () { return setMode(display_1.DISPLAY_MODE_EDIT); }, [setMode]);
};
exports.useSetEditMode = useSetEditMode;
/**
 * @returns function to change to layout mode
 */
var useSetLayoutMode = function () {
    var setMode = (0, exports.useSetMode)();
    return (0, react_1.useCallback)(function () { return setMode(display_1.DISPLAY_MODE_LAYOUT); }, [setMode]);
};
exports.useSetLayoutMode = useSetLayoutMode;
/**
 * @returns function to change to insert mode
 */
var useSetInsertMode = function () {
    var setMode = (0, exports.useSetMode)();
    return (0, react_1.useCallback)(function () { return setMode(display_1.DISPLAY_MODE_INSERT); }, [setMode]);
};
exports.useSetInsertMode = useSetInsertMode;
/**
 * @returns function to change to preview mode
 */
var useSetPreviewMode = function () {
    var setMode = (0, exports.useSetMode)();
    return (0, react_1.useCallback)(function () { return setMode(display_1.DISPLAY_MODE_PREVIEW); }, [setMode]);
};
exports.useSetPreviewMode = useSetPreviewMode;
//# sourceMappingURL=displayMode.js.map