"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCellSpacingProvider = exports.useCellSpacing = exports.useLang = exports.useUiTranslator = exports.useOption = exports.useOptions = exports.OptionsContext = exports.useEditorStore = void 0;
var react_1 = __importStar(require("react"));
var deepEquals_1 = __importDefault(require("../../utils/deepEquals"));
var defaultOptions_1 = require("../../defaultOptions");
var EditorStore_1 = require("../../EditorStore");
var reduxConnect_1 = require("../../reduxConnect");
var setting_1 = require("../../selector/setting");
var getCellSpacing_1 = require("../../utils/getCellSpacing");
var NoopProvider_1 = __importDefault(require("../Cell/NoopProvider"));
var renderOptions_1 = require("./renderOptions");
/**
 * @returns the store object of the current editor. Contains the redux store.
 */
var useEditorStore = function () { return (0, react_1.useContext)(EditorStore_1.EditorContext); };
exports.useEditorStore = useEditorStore;
exports.OptionsContext = (0, react_1.createContext)(defaultOptions_1.DEFAULT_OPTIONS);
/**
 * @returns the options object of the current Editor.
 *
 * this object is memoized, alltough its better to use `useOption` instead if you want to use a single option
 */
var useOptions = function () { return (0, react_1.useContext)(exports.OptionsContext); };
exports.useOptions = useOptions;
/**
 * get a single (memoized) option value
 * @param key the option key
 * @returns the option value
 */
var useOption = function (key) {
    var options = (0, exports.useOptions)();
    var option = options[key];
    var lastOption = (0, react_1.useRef)(option);
    if (!(0, deepEquals_1.default)(lastOption.current, option)) {
        lastOption.current = option;
    }
    return lastOption.current;
};
exports.useOption = useOption;
/**
 * @returns the an object with a single `t` function for ui translations
 */
var useUiTranslator = function () {
    var uiTranslator = (0, exports.useOption)('uiTranslator');
    return {
        t: function (key) {
            var _a;
            return (_a = uiTranslator === null || uiTranslator === void 0 ? void 0 : uiTranslator(key)) !== null && _a !== void 0 ? _a : key;
        },
    };
};
exports.useUiTranslator = useUiTranslator;
/**
 * @returns the current language
 */
var useLang = function () {
    return (0, reduxConnect_1.useSelector)(setting_1.getLang);
};
exports.useLang = useLang;
/**
 * @returns cell spacing for the current cell sub-tree
 */
var useCellSpacing = function () {
    return (0, getCellSpacing_1.normalizeCellSpacing)((0, renderOptions_1.useRenderOption)('cellSpacing'));
};
exports.useCellSpacing = useCellSpacing;
/**
 * @returns a Provider/value tuple that can be used to override cell spacing for a subtree of cells
 */
var useCellSpacingProvider = function (cellSpacing) {
    var renderOptions = (0, renderOptions_1.useRenderOptions)();
    var value = react_1.default.useMemo(function () { return (__assign(__assign({}, renderOptions), { cellSpacing: (0, getCellSpacing_1.normalizeCellSpacing)(cellSpacing) })); }, [renderOptions, JSON.stringify(cellSpacing)]);
    if (typeof cellSpacing === 'undefined' || cellSpacing == null) {
        return [NoopProvider_1.default, undefined];
    }
    else {
        return [renderOptions_1.RenderOptionsContext.Provider, value];
    }
};
exports.useCellSpacingProvider = useCellSpacingProvider;
//# sourceMappingURL=options.js.map