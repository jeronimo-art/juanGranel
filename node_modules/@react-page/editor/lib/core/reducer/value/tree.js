"use strict";
/* eslint-disable @typescript-eslint/ban-types */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rows = exports.cells = void 0;
var cell_1 = require("../../actions/cell");
var createId_1 = require("../../utils/createId");
var removeUndefinedProps_1 = require("../../utils/removeUndefinedProps");
var optimize_1 = require("./helper/optimize");
var sizing_1 = require("./helper/sizing");
var cell = function (s, a, depth) {
    return (0, optimize_1.optimizeCell)((function (state, action) {
        var _a, _b;
        var _c, _d, _e;
        var reduce = function () {
            return (0, removeUndefinedProps_1.removeUndefinedProps)(__assign(__assign({}, state), { rows: (0, exports.rows)(state.rows, action, depth + 1) }));
        };
        switch (action.type) {
            case cell_1.CELL_UPDATE_IS_DRAFT:
                if (action.id === state.id) {
                    var reduced = reduce();
                    if (action.lang) {
                        return __assign(__assign({}, reduced), { isDraftI18n: __assign(__assign({}, ((_c = reduced.isDraftI18n) !== null && _c !== void 0 ? _c : {})), (_a = {}, _a[action.lang] = action.isDraft, _a)) });
                    }
                    else {
                        return __assign(__assign({}, reduced), { isDraft: action.isDraft });
                    }
                }
                return reduce();
            case cell_1.CELL_UPDATE_DATA:
                if (action.id === state.id) {
                    // If this cell is being updated, set the data
                    var reduced = reduce();
                    // copy because we mutate afterwards with delete
                    var newI18nData = __assign({}, ((_d = reduced.dataI18n) !== null && _d !== void 0 ? _d : {}));
                    var emptyValue = action.data === null;
                    if (action.lang && emptyValue) {
                        newI18nData === null || newI18nData === void 0 ? true : delete newI18nData[action.lang];
                    }
                    return __assign(__assign({}, reduced), { dataI18n: __assign(__assign({}, (newI18nData !== null && newI18nData !== void 0 ? newI18nData : {})), (!emptyValue
                            ? (_b = {}, _b[action.lang] = action.data, _b) : {})) });
                }
                return reduce();
            case cell_1.CELL_INSERT_ABOVE:
                if (action.hoverId === state.id) {
                    return {
                        id: action.ids.cell,
                        rows: (0, exports.rows)([
                            {
                                id: action.ids.others[0],
                                cells: [
                                    __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),
                                ],
                            },
                            {
                                id: action.ids.others[1],
                                cells: [__assign(__assign({}, reduce()), { id: action.ids.others[2] })],
                            },
                        ], __assign(__assign({}, action), { hoverId: null }), depth + 1),
                    };
                }
                return reduce();
            case cell_1.CELL_INSERT_BELOW:
                if (action.hoverId === state.id) {
                    return {
                        id: action.ids.cell,
                        rows: (0, exports.rows)([
                            {
                                id: action.ids.others[0],
                                cells: [__assign(__assign({}, reduce()), { id: action.ids.others[1] })],
                            },
                            {
                                id: action.ids.others[2],
                                cells: [
                                    __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),
                                ],
                            },
                        ], __assign(__assign({}, action), { hoverId: null }), depth + 1),
                    };
                }
                return reduce();
            case cell_1.CELL_INSERT_AS_NEW_ROW: {
                if (action.hoverId === state.id) {
                    return __assign(__assign({}, state), { rows: __spreadArray(__spreadArray([], __read(((_e = state.rows) !== null && _e !== void 0 ? _e : [])), false), [
                            {
                                id: action.ids.others[1],
                                cells: [
                                    __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),
                                ],
                            },
                        ], false) });
                }
                return reduce();
            }
            default:
                return reduce();
        }
    })(s, a));
};
var createEmptyCell = function () { return ({
    id: (0, createId_1.createId)(),
    rows: [
        {
            id: (0, createId_1.createId)(),
            cells: [],
        },
    ],
}); };
var cells = function (state, action, depth) {
    if (state === void 0) { state = []; }
    if (depth === void 0) { depth = 0; }
    var newCells = depth === 0 && state.length === 0 ? [createEmptyCell()] : state;
    switch (action.type) {
        case cell_1.CELL_RESIZE:
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            newCells = (0, sizing_1.resizeCells)(newCells, action);
            break;
        case cell_1.CELL_INSERT_AT_END:
        case cell_1.CELL_INSERT_AS_NEW_ROW:
        case cell_1.CELL_INSERT_BELOW:
        case cell_1.CELL_INSERT_ABOVE:
            newCells = newCells.filter(function (c) { return c.id !== action.item.id; }); // this removes the cell if it already exists
            break;
        case cell_1.CELL_INSERT_LEFT_OF:
            newCells = newCells
                .filter(function (c) { return c.id !== action.item.id; }) // this removes the cell if it already exists
                .map(function (c) {
                return action.hoverId === c.id
                    ? [
                        __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),
                        __assign(__assign({}, c), { id: action.ids.others[0] }),
                    ]
                    : [c];
            })
                .reduce(optimize_1.flatten, []);
            break;
        case cell_1.CELL_INSERT_RIGHT_OF:
            newCells = newCells
                .filter(function (c) { return c.id !== action.item.id; }) // this removes the cell if it already exists
                .map(function (c) {
                return action.hoverId === c.id
                    ? [
                        __assign(__assign({}, c), { id: action.ids.others[0] }),
                        __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),
                    ]
                    : [c];
            })
                .reduce(optimize_1.flatten, []);
            break;
        case cell_1.CELL_INSERT_INLINE_RIGHT:
        case cell_1.CELL_INSERT_INLINE_LEFT:
            newCells = newCells
                .filter(function (c) { return c.id !== action.item.id; }) // this removes the cell if it already exists
                .map(function (c) {
                if (action.hoverId === c.id) {
                    return [
                        {
                            id: action.ids.cell,
                            rows: [
                                {
                                    id: action.ids.others[0],
                                    cells: [
                                        __assign(__assign({}, action.item), { inline: action.type === cell_1.CELL_INSERT_INLINE_RIGHT
                                                ? 'right'
                                                : 'left', id: action.ids.item, size: 0 }),
                                        __assign(__assign({}, c), { id: action.ids.others[1], inline: null, hasInlineNeighbour: action.ids.item, size: 0 }),
                                    ],
                                },
                            ],
                        },
                    ];
                }
                return [c];
            })
                .reduce(optimize_1.flatten, []);
            break;
        case cell_1.CELL_REMOVE:
            newCells = newCells.filter(function (_a) {
                var id = _a.id;
                return !action.ids.includes(id);
            });
            break;
    }
    var reducedCells = newCells.map(function (c) { return cell(c, action, depth); });
    return (0, optimize_1.optimizeCells)(reducedCells);
};
exports.cells = cells;
var row = function (s, a, depth) {
    return (0, optimize_1.optimizeRow)((function (state, action) {
        var reduce = function () { return (__assign(__assign({}, state), { cells: (0, exports.cells)(state.cells, action, depth + 1) })); };
        switch (action.type) {
            case cell_1.CELL_INSERT_LEFT_OF:
                if (action.hoverId !== state.id) {
                    return reduce();
                }
                return __assign(__assign({}, state), { cells: (0, exports.cells)(__spreadArray([
                        __assign(__assign({}, action.item), { id: action.ids.item, inline: null })
                    ], __read(state.cells), false), __assign(__assign({}, action), { hoverId: null }), depth + 1) });
            case cell_1.CELL_INSERT_RIGHT_OF:
                if (action.hoverId !== state.id) {
                    return reduce();
                }
                return __assign(__assign({}, state), { cells: (0, exports.cells)(__spreadArray(__spreadArray([], __read(state.cells), false), [
                        __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),
                    ], false), __assign(__assign({}, action), { hoverId: null }), depth + 1) });
            /*case CELL_DRAG_HOVER:
              if (action.hoverId === state.id) {
                return { ...reduce(), hoverPosition: action.position };
              }
              return reduce();
              */
            default:
                return reduce();
        }
    })(s, a));
};
var rows = function (s, a, depth) {
    if (s === void 0) { s = []; }
    if (depth === void 0) { depth = 0; }
    return (0, optimize_1.optimizeRows)(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (function (state, action) {
        var reduce = function () { return state.map(function (r) { return row(r, action, depth); }); };
        switch (action.type) {
            case cell_1.CELL_INSERT_ABOVE:
                return state
                    .map(function (r) {
                    return action.hoverId === r.id
                        ? [
                            {
                                cells: [
                                    __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),
                                ],
                                id: action.ids.others[0],
                            },
                            __assign(__assign({}, r), { id: action.ids.others[1] }),
                        ]
                        : [r];
                })
                    .reduce(optimize_1.flatten, [])
                    .map(function (r) { return row(r, action, depth); });
            case cell_1.CELL_INSERT_BELOW:
                return state
                    .map(function (r) {
                    return action.hoverId === r.id
                        ? [
                            __assign(__assign({}, r), { id: action.ids.others[0] }),
                            {
                                cells: [
                                    __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),
                                ],
                                id: action.ids.others[1],
                            },
                        ]
                        : [r];
                })
                    .reduce(optimize_1.flatten, [])
                    .map(function (r) { return row(r, action, depth); });
            case cell_1.CELL_INSERT_AT_END: {
                var newRows = depth !== 0
                    ? state
                    : __spreadArray(__spreadArray([], __read(state), false), [
                        {
                            cells: [
                                __assign(__assign({}, action.item), { id: action.ids.item, inline: null }),
                            ],
                            id: action.ids.others[1],
                        },
                    ], false);
                return newRows.map(function (r) { return row(r, action, depth); });
            }
            default:
                return reduce();
        }
    })(s, a));
};
exports.rows = rows;
//# sourceMappingURL=tree.js.map