"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.values = void 0;
var redux_undo_1 = __importDefault(require("redux-undo"));
var debug_1 = require("redux-undo/lib/debug");
var core_1 = require("../../actions/cell/core");
var insert_1 = require("../../actions/cell/insert");
var value_1 = require("../../actions/value");
var const_1 = require("../../const");
var value_2 = require("../value");
if (!const_1.isProduction) {
    (0, debug_1.set)(true);
}
exports.values = (0, redux_undo_1.default)(value_2.value, {
    filter: function filterState(action, currentState, previousHistory) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (action === null || action === void 0 ? void 0 : action.notUndoable) {
            return false;
        }
        var undoable = [
            value_1.UPDATE_VALUE,
            core_1.CELL_UPDATE_DATA,
            core_1.CELL_REMOVE,
            core_1.CELL_RESIZE,
            insert_1.CELL_INSERT_ABOVE,
            insert_1.CELL_INSERT_BELOW,
            insert_1.CELL_INSERT_LEFT_OF,
            insert_1.CELL_INSERT_RIGHT_OF,
            insert_1.CELL_INSERT_INLINE_LEFT,
            insert_1.CELL_INSERT_INLINE_RIGHT,
            insert_1.CELL_INSERT_AT_END,
            insert_1.CELL_INSERT_AS_NEW_ROW,
        ].indexOf(action.type) >= 0;
        return undoable;
    },
    neverSkipReducer: true,
    syncFilter: true,
});
//# sourceMappingURL=index.js.map