"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var classnames_1 = __importDefault(require("classnames"));
var react_1 = __importDefault(require("react"));
var react_dnd_1 = require("react-dnd");
var useDragHandle_1 = require("../../../core/components/Cell/Draggable/useDragHandle");
var displayMode_1 = require("../../../core/components/hooks/displayMode");
var Draggable = function (_a) {
    var insert = _a.insert, children = _a.children;
    var setLayoutMode = (0, displayMode_1.useSetLayoutMode)();
    var _b = __read((0, react_dnd_1.useDrag)({
        type: 'cell',
        item: function () {
            setLayoutMode();
            return {
                cell: insert,
            };
        },
        collect: function (monitor) { return ({
            isDragging: monitor.isDragging(),
        }); },
    }), 3), isDragging = _b[0].isDragging, dragRef = _b[1], preview = _b[2];
    var classes = (0, classnames_1.default)({ 'react-page-toolbar-draggable-is-dragged': isDragging }, 'react-page-toolbar-draggable');
    return (react_1.default.createElement("div", { className: classes, ref: dragRef },
        react_1.default.createElement(react_dnd_1.DragPreviewImage, { connect: preview, src: useDragHandle_1.dragIcon }),
        children));
};
exports.default = Draggable;
//# sourceMappingURL=index.js.map