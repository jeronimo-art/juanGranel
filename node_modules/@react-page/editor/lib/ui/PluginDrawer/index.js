"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginDrawer = void 0;
var Drawer_1 = __importDefault(require("@material-ui/core/Drawer"));
var List_1 = __importDefault(require("@material-ui/core/List"));
var ListItem_1 = __importDefault(require("@material-ui/core/ListItem"));
var ListSubheader_1 = __importDefault(require("@material-ui/core/ListSubheader"));
var TextField_1 = __importDefault(require("@material-ui/core/TextField"));
var react_1 = __importDefault(require("react"));
var react_portal_1 = require("react-portal");
var hooks_1 = require("../../core/components/hooks");
var index_1 = __importDefault(require("./Item/index"));
var getPluginTitle = function (plugin) { var _a; return (_a = (plugin.title || plugin.text)) !== null && _a !== void 0 ? _a : ''; };
exports.PluginDrawer = react_1.default.memo(function () {
    var defaultLabels = {
        noPluginFoundContent: 'No blocks found',
        searchPlaceholder: 'Search for blocks',
        insertPlugin: 'Add blocks to page',
        dragMe: 'Drag me!',
    };
    var nodeId = (0, hooks_1.useDisplayModeReferenceNodeId)();
    var plugins = (0, hooks_1.useAllCellPluginsForNode)(nodeId);
    var t = (0, hooks_1.useUiTranslator)().t;
    var _a = __read(react_1.default.useState(''), 2), searchText = _a[0], setSearchText = _a[1];
    var searchFilter = react_1.default.useCallback(function (plugin) {
        var id = plugin.id;
        var title = getPluginTitle(plugin);
        return (plugin &&
            id &&
            !plugin.hideInMenu &&
            (id.toLowerCase().startsWith(searchText === null || searchText === void 0 ? void 0 : searchText.toLowerCase()) ||
                (plugin.description &&
                    plugin.description
                        .toLowerCase()
                        .startsWith(searchText === null || searchText === void 0 ? void 0 : searchText.toLowerCase())) ||
                (title && title.toLowerCase().startsWith(searchText === null || searchText === void 0 ? void 0 : searchText.toLowerCase()))));
    }, [searchText]);
    var onSearch = react_1.default.useCallback(function (e) {
        var target = e.target;
        if (target instanceof HTMLInputElement) {
            setSearchText(target.value);
        }
    }, [setSearchText]);
    var isInsertMode = (0, hooks_1.useIsInsertMode)();
    var inputRef = react_1.default.useRef();
    react_1.default.useEffect(function () {
        var handle;
        if (inputRef.current && isInsertMode) {
            handle = setTimeout(function () {
                var e = inputRef.current.querySelector('input');
                if (e) {
                    e.focus();
                }
            }, 100);
        }
        return function () {
            clearTimeout(handle);
        };
    }, [inputRef.current, isInsertMode]);
    var filteredPlugins = plugins.filter(searchFilter);
    return (react_1.default.createElement(react_portal_1.Portal, null,
        react_1.default.createElement(Drawer_1.default, { variant: "persistent", className: "react-page-plugin-drawer", open: isInsertMode, PaperProps: {
                style: {
                    width: 320,
                },
            } },
            react_1.default.createElement(List_1.default, { subheader: react_1.default.createElement(ListSubheader_1.default, null, t(defaultLabels.insertPlugin)) },
                react_1.default.createElement(ListItem_1.default, null,
                    react_1.default.createElement(TextField_1.default, { inputRef: inputRef, placeholder: t(defaultLabels.searchPlaceholder), fullWidth: true, onChange: onSearch })),
                filteredPlugins.length === 0 && (react_1.default.createElement(ListSubheader_1.default, null, t(defaultLabels.noPluginFoundContent)))),
            filteredPlugins.length > 0 && (react_1.default.createElement(List_1.default, null, filteredPlugins.map(function (plugin, k) {
                return (react_1.default.createElement(index_1.default, { translations: defaultLabels, plugin: plugin, key: k.toString(), insert: {
                        plugin: plugin.id,
                    } }));
            }))))));
});
//# sourceMappingURL=index.js.map