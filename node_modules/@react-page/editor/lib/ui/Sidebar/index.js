"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sidebar = void 0;
var react_1 = __importDefault(require("react"));
var hooks_1 = require("../../core/components/hooks");
var index_1 = __importDefault(require("./ToggleEdit/index"));
var index_2 = __importDefault(require("./ToggleInsert/index"));
var index_3 = __importDefault(require("./ToggleLayout/index"));
var index_4 = __importDefault(require("./TogglePreview/index"));
var index_5 = __importDefault(require("./ToggleResize/index"));
var UndoRedo_1 = __importDefault(require("./UndoRedo"));
var Zoom_1 = __importDefault(require("./Zoom"));
var getStickyNessstyle = function (stickyness) {
    if (!stickyness ||
        (!stickyness.shouldStickToBottom && !stickyness.shouldStickToTop)) {
        return {
            position: 'fixed',
            right: stickyness.rightOffsetFixed || 0,
        };
    }
    return {
        position: 'absolute',
        bottom: stickyness.shouldStickToBottom ? 0 : 'auto',
        top: stickyness.shouldStickToTop ? 0 : 'auto',
        right: -stickyness.rightOffset || 0,
    };
};
var Sidebar = function (_a) {
    var stickyNess = _a.stickyNess;
    var t = (0, hooks_1.useUiTranslator)().t;
    var zoomEnabled = (0, hooks_1.useOption)('zoomEnabled');
    var undoRedoEnabled = (0, hooks_1.useOption)('undoRedoEnabled');
    var editEnabled = (0, hooks_1.useOption)('editEnabled');
    var insertEnabled = (0, hooks_1.useOption)('insertEnabled');
    var layoutEnabled = (0, hooks_1.useOption)('layoutEnabled');
    var resizeEnabled = (0, hooks_1.useOption)('resizeEnabled');
    var previewEnabled = (0, hooks_1.useOption)('previewEnabled');
    var defaultLabels = {
        edit: 'Edit blocks',
        insert: 'Add blocks',
        layout: 'Move blocks',
        resize: 'Resize blocks',
        preview: 'Preview page',
    };
    var customOptions = (0, hooks_1.useOption)('customOptions');
    var actions = __spreadArray([
        // eslint-disable-next-line react/jsx-key
        undoRedoEnabled
            ? { action: react_1.default.createElement(UndoRedo_1.default, { labelRedo: "redo", labelUndo: "undo" }) }
            : null,
        zoomEnabled
            ? { action: react_1.default.createElement(Zoom_1.default, { labelZoomIn: "zoom in", labelZoomOut: "zoom out" }) }
            : null,
        editEnabled
            ? { action: react_1.default.createElement(index_1.default, { label: t(defaultLabels.edit) }) }
            : null,
        insertEnabled
            ? { action: react_1.default.createElement(index_2.default, { label: t(defaultLabels.insert) }) }
            : null,
        layoutEnabled
            ? { action: react_1.default.createElement(index_3.default, { label: t(defaultLabels.layout) }) }
            : null,
        resizeEnabled
            ? { action: react_1.default.createElement(index_5.default, { label: t(defaultLabels.resize) }) }
            : null,
        previewEnabled
            ? { action: react_1.default.createElement(index_4.default, { label: t(defaultLabels.preview) }) }
            : null
    ], __read(customOptions.map(function (customOption) { return ({ action: customOption }); })), false).filter(Boolean);
    return (react_1.default.createElement("div", { className: "react-page-controls-mode-toggle-control-group", style: __assign({ position: 'fixed', zIndex: 10001, bottom: 0, right: 0, display: 'flex', maxHeight: '100%' }, getStickyNessstyle(stickyNess)) },
        react_1.default.createElement("div", { ref: stickyNess.stickyElRef, style: {
                padding: 16,
                position: 'relative',
                flexFlow: 'column wrap',
                direction: 'rtl',
                display: 'flex',
            } }, actions.map(function (_a, index) {
            var action = _a.action;
            return (react_1.default.createElement("div", { key: index, className: "react-page-controls-mode-toggle-control", style: {
                    animationDelay: (actions.length - index) * 150 + 'ms',
                } },
                action,
                react_1.default.createElement("div", { className: "react-page-controls-mode-toggle-clearfix" })));
        }))));
};
exports.Sidebar = Sidebar;
//# sourceMappingURL=index.js.map