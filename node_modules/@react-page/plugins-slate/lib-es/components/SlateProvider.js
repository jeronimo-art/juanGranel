var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { deepEquals } from '@react-page/editor';
import debounce from 'lodash.debounce';
import React, { useCallback, useEffect, useMemo, useRef, useState, } from 'react';
import { createEditor, Transforms } from 'slate';
import { Slate, withReact } from 'slate-react';
import withInline from '../slateEnhancer/withInline';
import withPaste from '../slateEnhancer/withPaste';
import DialogVisibleProvider from './DialogVisibleProvider';
var SlateProvider = function (props) {
    var data = props.data, plugins = props.plugins, children = props.children, defaultPluginType = props.defaultPluginType;
    var _a = __read(useState(data === null || data === void 0 ? void 0 : data.slate), 2), value = _a[0], setValue = _a[1];
    var valueRef = useRef(value);
    valueRef.current = value;
    var editor = useMemo(function () {
        return withPaste(plugins, defaultPluginType)(withReact(withInline(plugins)(createEditor())));
    }, []);
    var onChangeDebounced = useCallback(debounce(function () {
        props.onChange({
            slate: valueRef.current,
            selection: editor.selection,
        }, {
            // mark as not undoable when state is same
            // that happens if only selection was changed
            notUndoable: deepEquals(valueRef.current, data.slate),
        });
    }, 200), [props.onChange, editor, data.slate]);
    useEffect(function () {
        if (data.selection) {
            // update seleciton, if changed from outside (e.g. through undo)
            Transforms.select(editor, data.selection);
        }
        else {
            // deselect, otherwise slate might throw an eerror if cursor is now on a non existing dom node
            Transforms.deselect(editor);
        }
        setValue(data === null || data === void 0 ? void 0 : data.slate);
    }, [data === null || data === void 0 ? void 0 : data.slate, data === null || data === void 0 ? void 0 : data.selection]);
    var onChange = useCallback(function (v) {
        if (editor.selection) {
            setValue(v);
            onChangeDebounced();
        }
    }, [onChangeDebounced]);
    return (React.createElement(DialogVisibleProvider, null,
        React.createElement(Slate, { editor: editor, value: value, onChange: onChange }, children)));
};
export default SlateProvider;
//# sourceMappingURL=SlateProvider.js.map