import { __rest } from "tslib";
import { useTheme } from '@material-ui/core';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import FormLabel from '@material-ui/core/FormLabel';
import RadioMaterial from '@material-ui/core/Radio';
import RadioGroup from '@material-ui/core/RadioGroup';
import omit from 'lodash/omit';
import React from 'react';
import { connectField, filterDOMProps } from 'uniforms';
import wrapField from './wrapField';
function Radio(_a) {
    var _b, _c, _d;
    var { allowedValues, disabled, id, inputRef, label, name, onChange, readOnly, row, transform, value } = _a, props = __rest(_a, ["allowedValues", "disabled", "id", "inputRef", "label", "name", "onChange", "readOnly", "row", "transform", "value"]);
    const theme = useTheme();
    const formControlThemeProps = (_b = theme.props) === null || _b === void 0 ? void 0 : _b.MuiFormControl;
    return wrapField(Object.assign(Object.assign({ fullWidth: (_c = formControlThemeProps === null || formControlThemeProps === void 0 ? void 0 : formControlThemeProps.fullWidth) !== null && _c !== void 0 ? _c : true, margin: (_d = formControlThemeProps === null || formControlThemeProps === void 0 ? void 0 : formControlThemeProps.margin) !== null && _d !== void 0 ? _d : 'dense' }, props), { component: 'fieldset', disabled }), label && (React.createElement(FormLabel, { component: "legend", htmlFor: name }, label)), React.createElement(RadioGroup, { id: id, name: name, onChange: (event) => disabled || readOnly || onChange(event.target.value), ref: inputRef, row: row, value: value !== null && value !== void 0 ? value : '' }, allowedValues === null || allowedValues === void 0 ? void 0 : allowedValues.map(item => (React.createElement(FormControlLabel, { control: React.createElement(RadioMaterial, Object.assign({}, omit(filterDOMProps(props), ['checkboxes', 'helperText']))), key: item, label: transform ? transform(item) : item, value: `${item}` })))));
}
export default connectField(Radio, { kind: 'leaf' });
